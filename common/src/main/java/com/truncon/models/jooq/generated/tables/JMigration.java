/*
 * This file is generated by jOOQ.
 */
package com.truncon.models.jooq.generated.tables;


import com.truncon.models.jooq.generated.JPublic;
import com.truncon.models.jooq.generated.Keys;
import com.truncon.models.jooq.generated.tables.records.JMigrationRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JMigration extends TableImpl<JMigrationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.migration</code>
     */
    public static final JMigration MIGRATION = new JMigration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JMigrationRecord> getRecordType() {
        return JMigrationRecord.class;
    }

    /**
     * The column <code>public.migration.id</code>.
     */
    public final TableField<JMigrationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.migration.type</code>.
     */
    public final TableField<JMigrationRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.migration.script</code>.
     */
    public final TableField<JMigrationRecord, String> SCRIPT = createField(DSL.name("script"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.migration.release</code>.
     */
    public final TableField<JMigrationRecord, String> RELEASE = createField(DSL.name("release"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.migration.version</code>.
     */
    public final TableField<JMigrationRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.migration.description</code>.
     */
    public final TableField<JMigrationRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.migration.checksum</code>.
     */
    public final TableField<JMigrationRecord, Long> CHECKSUM = createField(DSL.name("checksum"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.migration.installation_date_time</code>.
     */
    public final TableField<JMigrationRecord, LocalDateTime> INSTALLATION_DATE_TIME = createField(DSL.name("installation_date_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.migration.installed_by_user_id</code>.
     */
    public final TableField<JMigrationRecord, Long> INSTALLED_BY_USER_ID = createField(DSL.name("installed_by_user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.migration.execution_duration</code>.
     */
    public final TableField<JMigrationRecord, Long> EXECUTION_DURATION = createField(DSL.name("execution_duration"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.migration.is_success</code>.
     */
    public final TableField<JMigrationRecord, Boolean> IS_SUCCESS = createField(DSL.name("is_success"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private JMigration(Name alias, Table<JMigrationRecord> aliased) {
        this(alias, aliased, null);
    }

    private JMigration(Name alias, Table<JMigrationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.migration</code> table reference
     */
    public JMigration(String alias) {
        this(DSL.name(alias), MIGRATION);
    }

    /**
     * Create an aliased <code>public.migration</code> table reference
     */
    public JMigration(Name alias) {
        this(alias, MIGRATION);
    }

    /**
     * Create a <code>public.migration</code> table reference
     */
    public JMigration() {
        this(DSL.name("migration"), null);
    }

    public <O extends Record> JMigration(Table<O> child, ForeignKey<O, JMigrationRecord> key) {
        super(child, key, MIGRATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<JMigrationRecord, Long> getIdentity() {
        return (Identity<JMigrationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JMigrationRecord> getPrimaryKey() {
        return Keys.MIGRATION_PKEY;
    }

    @Override
    public JMigration as(String alias) {
        return new JMigration(DSL.name(alias), this);
    }

    @Override
    public JMigration as(Name alias) {
        return new JMigration(alias, this);
    }

    @Override
    public JMigration as(Table<?> alias) {
        return new JMigration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JMigration rename(String name) {
        return new JMigration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JMigration rename(Name name) {
        return new JMigration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JMigration rename(Table<?> name) {
        return new JMigration(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, String, String, String, Long, LocalDateTime, Long, Long, Boolean> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super Long, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super Long, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
