/*
 * This file is generated by jOOQ.
 */
package com.truncon.models.jooq.generated.tables;


import com.truncon.models.jooq.generated.JPublic;
import com.truncon.models.jooq.generated.Keys;
import com.truncon.models.jooq.generated.tables.records.JUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JUser extends TableImpl<JUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user</code>
     */
    public static final JUser USER = new JUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JUserRecord> getRecordType() {
        return JUserRecord.class;
    }

    /**
     * The column <code>public.user.id</code>.
     */
    public final TableField<JUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user.email</code>.
     */
    public final TableField<JUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user.preferred_name</code>.
     */
    public final TableField<JUserRecord, String> PREFERRED_NAME = createField(DSL.name("preferred_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user.password</code>.
     */
    public final TableField<JUserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user.salt</code>.
     */
    public final TableField<JUserRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user.creation_date_time</code>.
     */
    public final TableField<JUserRecord, LocalDateTime> CREATION_DATE_TIME = createField(DSL.name("creation_date_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("timezone('utc'::text, now())"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.user.created_by_user_id</code>.
     */
    public final TableField<JUserRecord, Integer> CREATED_BY_USER_ID = createField(DSL.name("created_by_user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.user.modification_date_time</code>.
     */
    public final TableField<JUserRecord, LocalDateTime> MODIFICATION_DATE_TIME = createField(DSL.name("modification_date_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("timezone('utc'::text, now())"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.user.modified_by_user_id</code>.
     */
    public final TableField<JUserRecord, Integer> MODIFIED_BY_USER_ID = createField(DSL.name("modified_by_user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.user.db_revision</code>.
     */
    public final TableField<JUserRecord, Long> DB_REVISION = createField(DSL.name("db_revision"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.BIGINT)), this, "");

    private JUser(Name alias, Table<JUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private JUser(Name alias, Table<JUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    public JUser(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    public JUser(Name alias) {
        this(alias, USER);
    }

    /**
     * Create a <code>public.user</code> table reference
     */
    public JUser() {
        this(DSL.name("user"), null);
    }

    public <O extends Record> JUser(Table<O> child, ForeignKey<O, JUserRecord> key) {
        super(child, key, USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<JUserRecord, Long> getIdentity() {
        return (Identity<JUserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JUserRecord> getPrimaryKey() {
        return Keys.PK_USER;
    }

    @Override
    public List<UniqueKey<JUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_USER_EMAIL);
    }

    @Override
    public List<ForeignKey<JUserRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER__FK_USER_CREATED_BY_USER_ID, Keys.USER__FK_USER_MODIFIED_BY_USER_ID);
    }

    private transient JUser _fkUserCreatedByUserId;
    private transient JUser _fkUserModifiedByUserId;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>fk_user_created_by_user_id</code> key.
     */
    public JUser fkUserCreatedByUserId() {
        if (_fkUserCreatedByUserId == null)
            _fkUserCreatedByUserId = new JUser(this, Keys.USER__FK_USER_CREATED_BY_USER_ID);

        return _fkUserCreatedByUserId;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>fk_user_modified_by_user_id</code> key.
     */
    public JUser fkUserModifiedByUserId() {
        if (_fkUserModifiedByUserId == null)
            _fkUserModifiedByUserId = new JUser(this, Keys.USER__FK_USER_MODIFIED_BY_USER_ID);

        return _fkUserModifiedByUserId;
    }

    @Override
    public JUser as(String alias) {
        return new JUser(DSL.name(alias), this);
    }

    @Override
    public JUser as(Name alias) {
        return new JUser(alias, this);
    }

    @Override
    public JUser as(Table<?> alias) {
        return new JUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JUser rename(String name) {
        return new JUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUser rename(Name name) {
        return new JUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUser rename(Table<?> name) {
        return new JUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, String, String, LocalDateTime, Integer, LocalDateTime, Integer, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super LocalDateTime, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super LocalDateTime, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
